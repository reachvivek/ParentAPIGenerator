using System.Net.Http.Headers;
using Microsoft.AspNetCore.Mvc;
using System.Text;
using Newtonsoft.Json;
using TicketingToolParentAPI.Models;

namespace {{ Namespace }}.Utility
{
    public class ApiRequest
    {
        private readonly HttpClient _httpClient;

        public ApiRequest(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static void AddHeaders(
            HttpRequestMessage requestMessage,
            string? authorization,
            IDictionary<string, string>? extraHeaders = null
        )
        {
            if (!string.IsNullOrWhiteSpace(authorization))
            {
                // Check if "Bearer " is already present
                string token = authorization.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase)
                    ? authorization.Substring(7) // Remove existing "Bearer " prefix
                    : authorization;

                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            if (extraHeaders != null)
            {
                foreach (var header in extraHeaders)
                {
                    requestMessage.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
        }


        private async Task<(int, string)> SendRequestAsync(HttpMethod method, string url, string? authorization = null, object? payload = null)
        {
            if (!Uri.IsWellFormedUriString(url, UriKind.Absolute) && _httpClient.BaseAddress != null)
            {
                url = new Uri(_httpClient.BaseAddress, url).ToString();
            }
            else if (!Uri.IsWellFormedUriString(url, UriKind.Absolute))
            {
                throw new InvalidOperationException("Invalid URL and BaseAddress is not set on HttpClient.");
            }

            using var requestMessage = new HttpRequestMessage(method, url);
            AddHeaders(requestMessage, authorization);

            if (payload is FileData fileData && fileData.Files != null)
            {
                var formData = new MultipartFormDataContent();
                
                foreach (var file in fileData.Files)
                {
                    var stream = file.OpenReadStream();
                    var fileContent = new StreamContent(stream);
                    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                    formData.Add(fileContent, "Files", file.FileName);
                }

                formData.Add(new StringContent(fileData.FileType ?? ""), "FileType");
                formData.Add(new StringContent(fileData.Category ?? ""), "Category");
                formData.Add(new StringContent(fileData.roleId.ToString()), "roleId");

                requestMessage.Content = formData;
            }
            else if (payload != null)
            {
                string json = JsonConvert.SerializeObject(payload);
                requestMessage.Content = new StringContent(json, Encoding.UTF8, "application/json");
            }

            var response = await _httpClient.SendAsync(requestMessage);
            var responseContent = await response.Content.ReadAsStringAsync();
            return ((int)response.StatusCode, responseContent);
        }

        public async Task<ContentResult> CallEndpointAsync(HttpMethod method, string url, string? authorization = null, object? payload = null)
        {
            var (statusCode, response) = await SendRequestAsync(method, url, authorization, payload);

            return new ContentResult
            {
                StatusCode = statusCode,
                Content = response,
                ContentType = "application/json"
            };
        }
    }
}