using System.Text;
using Newtonsoft.Json;

namespace {{ Namespace }}.Utility
{
    public class ApiRequest
    {
        private readonly HttpClient _httpClient;

        public ApiRequest(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static Dictionary<string, string> PrepareHeaders(
            string? authorization,
            IDictionary<string, string>? extraHeaders = null
        )
        {
            var headers = new Dictionary<string, string>();

            if (!string.IsNullOrWhiteSpace(authorization))
            {
                headers["Authorization"] = authorization;
            }

            if (extraHeaders != null)
            {
                foreach (var header in extraHeaders)
                {
                    headers[header.Key] = header.Value;
                }
            }

            return headers;
        }

        private async Task<HttpResponseMessage> MakeApiRequestAsync(
            HttpMethod method,
            string url,
            string? authorization = null,
            object? payload = null,
            bool isMultipart = false
        )
        {
            if (!Uri.IsWellFormedUriString(url, UriKind.Absolute))
            {
                if (_httpClient.BaseAddress == null)
                {
                    throw new InvalidOperationException("BaseAddress is not set on the HttpClient.");
                }
                url = new Uri(_httpClient.BaseAddress, url).ToString();
            }

            var requestMessage = new HttpRequestMessage(method, url);
            var headers = PrepareHeaders(authorization);

            foreach (var header in headers)
            {
                requestMessage.Headers.Add(header.Key, header.Value);
            }

            if (payload != null && !isMultipart)
            {
                var json = JsonConvert.SerializeObject(payload);
                requestMessage.Content = new StringContent(json, Encoding.UTF8, "application/json");
            }

            var response = await _httpClient.SendAsync(requestMessage);
            response.EnsureSuccessStatusCode();
            return response;
        }

        public async Task<string> CallEndpointAsync(
            HttpMethod method,
            string url,
            string? authorization = null,
            object? payload = null
        )
        {
            var httpResponse = await MakeApiRequestAsync(method, url, authorization, payload);
            return await httpResponse.Content.ReadAsStringAsync();
        }
    }
}
