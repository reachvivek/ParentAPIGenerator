using Microsoft.AspNetCore.Mvc;
using {{ namespace }}.Utility;

namespace {{ namespace }}.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class {{ controllername }}Controller : ControllerBase
    {
        private readonly ApiRequest _request;

        public {{ controllername }}Controller(ApiRequest request)
        {
            _request = request;
        }

        {% if getmethods.size > 0 %}
        // GET Methods
        {% for method in getmethods %}
        [HttpGet("{{ method.route }}")]
        public async Task<IActionResult> {{ method.name }}(
            {%- for param in method.parameters -%}
                {{ param.type }} {{ param.name }}{% if forloop.last == false %}, {% endif %}
            {%- endfor -%}
            {%- if method.parameters.size > 0 -%}, {% endif %}
            [FromHeader(Name = "Authorization")] string? authorization = null
        )
        {
            string endpoint = $"/{{ controllername }}/{{ method.route }}";
            string query = "";
            {%- for param in method.parameters -%}
            query += "{{ param.name }}=" + Uri.EscapeDataString({{ param.name }}.ToString()) + "&";
            {%- endfor -%}
            if (query.Length > 0)
            {
                endpoint += "?" + query.TrimEnd('&');
            }
            return await _request.CallEndpointAsync(HttpMethod.Get, endpoint, authorization);
        }
        {% endfor %}
        {% endif %}

        {% if putmethods.size > 0 %}
        // PUT Methods
        {% for method in putmethods %}
        [HttpPut("{{ method.route }}")]
        public async Task<IActionResult> {{ method.name }}(
            {%- if method.hasbody -%}
                [FromBody] {{ method.parametertype }} model,
            {%- else -%}
                {%- for param in method.parameters -%}
                    {{ param.type }} {{ param.name }}{% if forloop.last == false %}, {% endif %}
                {%- endfor -%}
                {%- if method.parameters.size > 0 -%}, {% endif %}
            {%- endif -%}
            [FromHeader(Name = "Authorization")] string? authorization = null
        )
        {
            return await _request.CallEndpointAsync(HttpMethod.Put, "/{{ controllername }}/{{ method.route }}", authorization{%- if method.hasbody -%}, model
                {%- else -%}
                    {%- for param in method.parameters -%}, {{ param.name }}{%- endfor -%}
                {%- endif -%});
        }
        {% endfor %}
        {% endif %}

        {% if postmethods.size > 0 %}
        // POST Methods
        {% for method in postmethods %}
        [HttpPost("{{ method.route }}")]
        public async Task<IActionResult> {{ method.name }}(
            {%- if method.hasbody -%}
                {%- if method.parametertype == "FileData" or method.parametertype == "IFormFile" -%}
                    [FromForm] {{ method.parametertype }} model,
                {%- elsif method.parametertype contains "Form" -%}
                    [FromForm] {{ method.parametertype }} model,
                {%- else -%}
                    [FromBody] {{ method.parametertype }} model,
                {%- endif -%}
            {%- else -%}
                {%- for param in method.parameters -%}
                    {{ param.type }} {{ param.name }}{% if forloop.last == false %}, {% endif %}
                {%- endfor -%}
                {%- if method.parameters.size > 0 -%}, {% endif %}
            {%- endif -%}
            [FromHeader(Name = "Authorization")] string? authorization = null
        )
        {
            return await _request.CallEndpointAsync(HttpMethod.Post, "/{{ controllername }}/{{ method.route }}", authorization{%- if method.hasbody -%}, model
                {%- else -%}
                    {%- for param in method.parameters -%}, {{ param.name }}{%- endfor -%}
                {%- endif -%});
        }
        {% endfor %}
        {% endif %}

        {% if deletemethods.size > 0 %}
        // DELETE Methods
        {% for method in deletemethods %}
        [HttpDelete("{{ method.route }}")]
        public async Task<IActionResult> {{ method.name }}(
            {%- for param in method.parameters -%}
                [FromQuery] {{ param.type }} {{ param.name }}{% if forloop.last == false %}, {% endif %}
            {%- endfor -%}
            {%- if method.parameters.size > 0 -%}, {% endif %}
            [FromHeader(Name = "Authorization")] string? authorization = null
        )
        {
            string endpoint = "/{{ controllername }}/{{ method.route }}";
            string query = "";
            {%- for param in method.parameters -%}
                {%- if param.type == "string" -%}
            query += "{{ param.name }}=" + Uri.EscapeDataString({{ param.name }}) + "&";
                {%- endif -%}
            {%- endfor -%}
            if(query.Length > 0)
            {
                endpoint += "?" + query.TrimEnd('&');
            }
            return await _request.CallEndpointAsync(HttpMethod.Delete, endpoint, authorization);
        }
        {% endfor %}
        {% endif %}
    }
}
